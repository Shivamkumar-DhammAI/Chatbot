# -*- coding: utf-8 -*-
"""Transcription.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N3Tp_jfifJL0bpces0fijS2sXRpqb09k
"""

!pip install -q yt-dlp openai-whisper ffmpeg-python

import yt_dlp
import whisper
import os


VIDEO_DIR = "nptel_videos"
TRANSCRIPTS_DIR = "transcripts"
COMBINED_TRANSCRIPT_PATH = os.path.join(TRANSCRIPTS_DIR, "combined_transcript.txt")


os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(TRANSCRIPTS_DIR, exist_ok=True)

video_urls = [
    "https://www.youtube.com/watch?v=cx5gPKp9QEc",
    "https://www.youtube.com/watch?v=IjKP9TV7MfE",
    "https://www.youtube.com/watch?v=UU6PccuoleE",
    "https://www.youtube.com/watch?v=CHs83nfkTy8",
    "https://www.youtube.com/watch?v=oouvhVPnuqY",
    "https://www.youtube.com/watch?v=9PSuiuGic3w",
    "https://www.youtube.com/watch?v=2QL_uQl7LMk",
    "https://www.youtube.com/watch?v=49yGZYeokKM",
    "https://www.youtube.com/watch?v=NRSfUsNTPSs",
    "https://www.youtube.com/watch?v=1Yejf_MRyp4",
    "https://www.youtube.com/watch?v=QxSu1WUJAdY",
    "https://www.youtube.com/watch?v=_2PKa7OPIgg",
    "https://www.youtube.com/watch?v=bOskzXrOqOo",
    "https://www.youtube.com/watch?v=y9Df27aLECo",
    "https://www.youtube.com/watch?v=bHT1SySn6z4",
    "https://www.youtube.com/watch?v=0mUY6QDUh1E",
    "https://www.youtube.com/watch?v=KPii4tR3Dkk",
    "https://www.youtube.com/watch?v=-HPbTHFN2sU",
    "https://www.youtube.com/watch?v=8Fk1H-sQhoo",
    "https://www.youtube.com/watch?v=vs8Iu16evZE",
    "https://www.youtube.com/watch?v=DGhQYSlzTUw",
    "https://www.youtube.com/watch?v=rbmZUPNmJrk",
    "https://www.youtube.com/watch?v=CaDyeLe6J80",
    "https://www.youtube.com/watch?v=EwXrGZzxoDA",
    "https://www.youtube.com/watch?v=SaNoLHeS_yM",
    "https://www.youtube.com/watch?v=JrQmQTnIuEQ",
    "https://www.youtube.com/watch?v=MP6FU7n8AOg",
    "https://www.youtube.com/watch?v=6wmzW4J6L3w",
    "https://www.youtube.com/watch?v=APYtuALgjoQ",
    "https://www.youtube.com/watch?v=SoCNScfZso0",
    "https://www.youtube.com/watch?v=YXkaKdYDaeA",
    "https://www.youtube.com/watch?v=ffei1V7NoJ0",
    "https://www.youtube.com/watch?v=nVwuoQYngW0",
    "https://www.youtube.com/watch?v=4fgiODO3y1U",
    "https://www.youtube.com/watch?v=QsL25iAdClA",
    "https://www.youtube.com/watch?v=S2NC6KUqexI",
    "https://www.youtube.com/watch?v=QL5XKGqB_aE",
    "https://www.youtube.com/watch?v=AtKH7QUJQ0k",
    "https://www.youtube.com/watch?v=cbL5q0HBlnE",
    "https://www.youtube.com/watch?v=3dn9SVGHDnk",
    "https://www.youtube.com/watch?v=XXh0owlqvjY",
    "https://www.youtube.com/watch?v=TD0OLk87Suk"
]

def download_video(video_url, output_path, video_id):
    """Downloads audio from YouTube and saves it with a unique name."""
    ydl_opts = {
        "outtmpl": f"{output_path}/lecture_{video_id}.%(ext)s",
        "format": "bestaudio/best",
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "wav",
            "preferredquality": "192"
        }],
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([video_url])

def transcribe_audio(audio_path, model="base"):
    """Transcribes audio using Whisper."""
    model = whisper.load_model(model)
    result = model.transcribe(audio_path)
    return result["text"]


with open(COMBINED_TRANSCRIPT_PATH, "w", encoding="utf-8") as combined_file:

    for idx, video_url in enumerate(video_urls, start=1):
        print(f"Processing video {idx}/{len(video_urls)}: {video_url}")


        video_id = f"{idx:02d}"
        download_video(video_url, VIDEO_DIR, video_id)


        audio_file = os.path.join(VIDEO_DIR, f"lecture_{video_id}.wav")


        if os.path.exists(audio_file):
            print(f"Transcribing: {audio_file}")
            transcript = transcribe_audio(audio_file)


            transcript_path = os.path.join(TRANSCRIPTS_DIR, f"lecture_{video_id}_transcript.txt")
            with open(transcript_path, "w", encoding="utf-8") as f:
                f.write(transcript)


            combined_file.write(f"\n\n=== Lecture {idx} Transcript ===\n\n")
            combined_file.write(transcript)

            print(f"Transcription saved: {transcript_path}")
        else:
            print(f"Audio file not found: {audio_file}")

print(f"All transcriptions combined and saved: {COMBINED_TRANSCRIPT_PATH}")